// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// e_monteCPP
NumericVector e_monteCPP(const IntegerMatrix& x, const IntegerMatrix& rin, const double& K, const int& Kmin, const NumericVector& par1, const NumericVector& par2, const int& type);
RcppExport SEXP _echelon_e_monteCPP(SEXP xSEXP, SEXP rinSEXP, SEXP KSEXP, SEXP KminSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type rin(rinSEXP);
    Rcpp::traits::input_parameter< const double& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kmin(KminSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(e_monteCPP(x, rin, K, Kmin, par1, par2, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_echelon_e_monteCPP", (DL_FUNC) &_echelon_e_monteCPP, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_echelon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
